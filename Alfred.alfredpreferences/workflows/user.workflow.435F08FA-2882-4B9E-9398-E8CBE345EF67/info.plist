<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.customct.AlfredEditor</string>
	<key>category</key>
	<string>Productivity</string>
	<key>connections</key>
	<dict>
		<key>180202E9-0ABB-4B09-A2F6-8B5C6A28212B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>35FCA1C0-528B-4BBB-96B0-037AC5E68121</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>23CF4A89-F938-4887-85DD-4CEA586F7C0D</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>83E00A4A-94F3-488D-9F20-977BF230A72D</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>459D6859-0B7F-4B55-B20C-FEB262ADC8EF</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>CBE8A345-1166-4A95-9694-B79AD101AA0C</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>50B62579-7339-42A0-89F6-498E6F52B61E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>87C367FE-29C3-4B94-BA81-50F59A4F1B00</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>576F338D-10F7-4E33-9F6C-247DC381A6EB</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>35FCA1C0-528B-4BBB-96B0-037AC5E68121</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>5783BF34-0318-4674-BBAB-DC5E8CE90398</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>20DE9F9D-0B97-4DFE-A5D0-95F0E6C6AB90</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>5D9B1396-CFBE-435B-B71B-66001A9E7B35</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>5548C7CD-634F-42A5-96C6-A9DBF8179E87</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>9FC31761-B240-4FB1-B894-9E3916D9F955</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>Open in Finder (PathFinder)</string>
			</dict>
		</array>
		<key>6CA6FC00-D1E3-4A64-8DFB-56D53950DD3B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>87C367FE-29C3-4B94-BA81-50F59A4F1B00</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>6CFB3322-F7BA-4017-9EF7-28F8C92C110E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>23CF4A89-F938-4887-85DD-4CEA586F7C0D</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>79B9FC52-024B-44B2-9A7C-6B27674E50F2</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>FBD0D7B7-C227-4A87-8E32-6648D871CCA7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>83163FAE-D31D-4D49-BDFD-016C3C9CFB63</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>856DEE49-73CE-4727-80B6-4C2AF3F13179</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>856DEE49-73CE-4727-80B6-4C2AF3F13179</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>83E00A4A-94F3-488D-9F20-977BF230A72D</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>87C367FE-29C3-4B94-BA81-50F59A4F1B00</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>83E00A4A-94F3-488D-9F20-977BF230A72D</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>CBE8A345-1166-4A95-9694-B79AD101AA0C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>35FCA1C0-528B-4BBB-96B0-037AC5E68121</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>CD390769-84F3-4A30-A948-6F7AE0240432</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>35FCA1C0-528B-4BBB-96B0-037AC5E68121</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>CDB8963D-6A56-4AED-8087-6C3D6C6EBDA6</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>180202E9-0ABB-4B09-A2F6-8B5C6A28212B</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>CE85A2C0-77D2-419A-B4F2-12D8B6BE71E5</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>576F338D-10F7-4E33-9F6C-247DC381A6EB</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>281B3D0C-272F-45AB-924E-7BF9C0AC11FC</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>Edit Theme</string>
			</dict>
		</array>
		<key>EB499A45-3D0D-48F6-BF17-090015F4897F</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>CD390769-84F3-4A30-A948-6F7AE0240432</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>FBD0D7B7-C227-4A87-8E32-6648D871CCA7</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>52DD1812-90ED-4B93-9416-7F7A48E5D575</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Richard Guay</string>
	<key>description</key>
	<string>A simple editor for Alfred.</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Alfred Editor</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>127</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

#
# If the directories are not in place, create them and set defaults.
#
if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   mkdir "$(getDataDir)/themes";
   mkdir "$(getDataDir)/plugins";
   echo -n "lesser-dark" &gt; "$(getDataDir)/current.theme";
   echo -n "" &gt; "$(getDataDir)/windows.txt";
   echo -n "vim" &gt; "$(getDataDir)/keyboard.txt";
fi

#
# Copy all themes and plugins into place.
#
cp themes/* "$(getDataDir)/themes";
cp -R plugins/* "$(getDataDir)/plugins";
cp ae /usr/local/bin;
echo -n "lesser-dark" &gt; "$(getDataDir)/current.theme";
echo -n "" &gt; "$(getDataDir)/windows.txt";
echo -n "vim" &gt; "$(getDataDir)/keyboard.txt";

echo "Themes and Plugins copied.";
</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>23CF4A89-F938-4887-85DD-4CEA586F7C0D</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<true/>
				<key>output</key>
				<integer>0</integer>
				<key>removeextension</key>
				<false/>
				<key>sticky</key>
				<false/>
				<key>text</key>
				<string>Alfred Editor</string>
				<key>title</key>
				<string>{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>83E00A4A-94F3-488D-9F20-977BF230A72D</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>ae:install</string>
				<key>subtext</key>
				<string>Alfred Editor Toolbox</string>
				<key>text</key>
				<string>Install Alfred Editor</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>6CFB3322-F7BA-4017-9EF7-28F8C92C110E</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>127</integer>
				<key>script</key>
				<string>#!/bin/zsh
#
# Launch the Alfred Editor from command line.
#

VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

###############################################################################
# Get the workflow cache dri
###############################################################################
getCacheDir() {
  local BUNDLEID=$(getBundleId)
  echo "${VPREFS}${BUNDLEID}"
}

/usr/bin/osascript -e "tell application \"Alfred 2\" to run trigger \"EditAlfredEditor\" in workflow \"com.customct.AlfredEditor\" with argument \"\"";

echo "Alfred Editor is open.";
</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>856DEE49-73CE-4727-80B6-4C2AF3F13179</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>ae:openeditor</string>
				<key>subtext</key>
				<string>Alfred Editor Toolbox</string>
				<key>text</key>
				<string>Open the Alfred Editor</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>83163FAE-D31D-4D49-BDFD-016C3C9CFB63</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

#
# If the directories are not in place, create them and set defaults.
#
if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   mkdir "$(getDataDir)/themes";
   mkdir "$(getDataDir)/plugins";
   echo "lesser-dark" &gt; "$(getDataDir)/current.theme";
fi

efile="{query}";


wins=`cat "$(getDataDir)/windows.txt" | tr -d ' \n'`;
thisDir=`pwd`;

echo -n "$efile" &gt; "$(getDataDir)/editfile.txt";

if [ -z $wins ]; then
	/usr/bin/osascript -e "tell application \"Alfred 2\" to run trigger \"RunNWjsDirectory\" in workflow \"com.customct.NWjs\" with argument \"$thisDir/AlfredEditor/\"";
fi

echo "Opened $efile";
</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>87C367FE-29C3-4B94-BA81-50F59A4F1B00</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>acceptsmulti</key>
				<true/>
				<key>filetypes</key>
				<array/>
				<key>name</key>
				<string>Edit in Alfred Editor</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.action</string>
			<key>uid</key>
			<string>50B62579-7339-42A0-89F6-498E6F52B61E</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>triggerid</key>
				<string>EditAlfredEditor</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>6CA6FC00-D1E3-4A64-8DFB-56D53950DD3B</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>ae:edit</string>
				<key>subtext</key>
				<string>Alfred Editor</string>
				<key>text</key>
				<string>Edit file in Finder or Path Finder with Alfred Edit</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>79B9FC52-024B-44B2-9A7C-6B27674E50F2</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>applescript</key>
				<string>on alfred_script(q)if application "Path Finder" is frontmost then	tell application "Path Finder"		set pathfinderselection to selection		if pathfinderselection is missing value then			display dialog "Nothing selected" buttons {"Oh, crud..."} default button 1			return		end if		set pathfinderpaths to ""		repeat with i from 1 to count of pathfinderselection			set pfItem to item i of pathfinderselection			-- Corrects for error when hidden files are showing			try				set currentpathfinderpath to (POSIX path of pfItem)				set pathfinderpaths to pathfinderpaths &amp; space ¬					&amp; quoted form of currentpathfinderpath			end try		end repeat		return currentpathfinderpath
	end tell
else if application "Finder" is frontmost then	tell application "Finder"		try			set filep to selection as alias list			set finderSelection to POSIX path of filep		on error			display dialog "Nothing selected" buttons ¬			{"Curses, foiled again!..."} default button 1			return		end try	end tell
	return finderSelection
end ifend alfred_script
</string>
				<key>cachescript</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.applescript</string>
			<key>uid</key>
			<string>FBD0D7B7-C227-4A87-8E32-6648D871CCA7</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>#!/bin/zsh
#
# Launch the Alfred Editor from command line.
#

VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

###############################################################################
# Get the workflow cache dri
###############################################################################
getCacheDir() {
  local BUNDLEID=$(getBundleId)
  echo "${VPREFS}${BUNDLEID}"
}

/usr/bin/osascript -e "tell application \"Alfred 2\" to run trigger \"EditAlfredEditor\" in workflow \"com.customct.AlfredEditor\" with argument \"{query}\"";
</string>
				<key>type</key>
				<integer>5</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.script</string>
			<key>uid</key>
			<string>52DD1812-90ED-4B93-9416-7F7A48E5D575</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict/>
			<key>type</key>
			<string>alfred.workflow.action.browseinalfred</string>
			<key>uid</key>
			<string>5548C7CD-634F-42A5-96C6-A9DBF8179E87</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>ae:open</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading Files...</string>
				<key>script</key>
				<string>#!/bin/bash

VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

RESULTS=()

################################################################################
# Adds a result to the result array
#
# $1 uid
# $2 arg
# $3 title
# $4 subtitle
# $5 icon
# $6 valid
# $7 autocomplete
###############################################################################
addResult() {
  RESULT="&lt;item uid='$(xmlEncode "$1")' arg='$(xmlEncode "$2")' valid='$6' autocomplete='$7'&gt;&lt;title&gt;$(xmlEncode "$3")&lt;/title&gt;&lt;subtitle&gt;$(xmlEncode "$4")&lt;/subtitle&gt;&lt;icon&gt;$(xmlEncode "$5")&lt;/icon&gt;&lt;/item&gt;"
  RESULTS+=("$RESULT")
}

###############################################################################
# Prints the feedback xml to stdout
###############################################################################
getXMLResults() {
  echo "&lt;?xml version='1.0'?&gt;&lt;items&gt;"

#  if [ "${#string[@]}" = "0" ]; then
#    echo "&lt;item uid='oftask' arg='-' valid='no'&gt;&lt;title&gt;No results found&lt;/title&gt;&lt;subtitle&gt;Please try another search term&lt;/subtitle&gt;&lt;icon&gt;&lt;/icon&gt;&lt;/item&gt;"
#  fi

  for R in ${RESULTS[*]}; do
    echo "$R"
  done

  echo "&lt;/items&gt;"
}

###############################################################################
# Escapes XML special characters with their entities
###############################################################################
xmlEncode() {
  echo "$1" | sed 's/\n/ /' | sed 's/&amp;/&amp;amp;/' | sed 's/&gt;/&amp;gt;/' | sed 's/&lt;/&amp;lt;/' | sed "s/\'/&amp;apos;/" | sed 's/\"/&amp;quot;/'
}

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

###############################################################################
# Get the workflow cache dri
###############################################################################
getCacheDir() {
  local BUNDLEID=$(getBundleId)
  echo "${VPREFS}${BUNDLEID}"
}

###############################################################################
# Save key=value to the workflow properties
#
# $1 key
# $2 value
# $3 non-volatile 0/1
# $4 filename (optional, filename will be "settings" if not specified)
###############################################################################
setPref() {
  local BUNDLEID=$(getBundleId)
  if [ "$3" = "0" ]; then
    local PREFDIR="${VPREFS}${BUNDLEID}"
  else
    local PREFDIR="${NVPREFS}${BUNDLEID}"
  fi

  if [ ! -d "$PREFDIR" ]; then
    mkdir -p "$PREFDIR"
  fi

  if [ -z "$4" ]; then
    local PREFFILE="${PREFDIR}/settings"
  else
    local PREFFILE="${PREFDIR}/$4"
  fi

  if [ ! -f "$PREFFILE" ]; then
    touch "$PREFFILE"
  fi

  local KEY_EXISTS=$(grep -c "$1=" "$PREFFILE")
  if [ "$KEY_EXISTS" = "0" ]; then
    echo "$1=$2" &gt;&gt; "$PREFFILE"
  else
    sed -i "" s/"$1=.*"/"$1=$2"/ "$PREFFILE"
  fi
}

###############################################################################
# Read a value for a given key from the workflow preferences
#
# $1 key
# $2 non-volatile 0/1
# $3 filename (optional, filename will be "settings" if not specified)
###############################################################################
getPref() {
  local BUNDLEID=$(getBundleId)
  if [ "$2" = "0" ]; then
    local PREFDIR="${VPREFS}${BUNDLEID}"
  else
    local PREFDIR="${NVPREFS}${BUNDLEID}"
  fi

  if [ ! -d "$PREFDIR" ]; then
    return
  fi

  if [ -z "$3" ]; then
    local PREFFILE="${PREFDIR}/settings"
  else
    local PREFFILE="${PREFDIR}/$3"
  fi

  if [ ! -f "$PREFFILE" ]; then
    return
  fi

  local VALUE=$(sed "/^\#/d" "$PREFFILE" | grep "$1"  | tail -n 1 | cut -d "=" -f2-)
  echo "$VALUE"
}

if [[ 'data' == {query}* ]]; then
	addResult 'AEDData' "$(getDataDir)" 'Open Data Directory' 'In Alfred' 'icon.png' 'yes' '';
fi
if [[ 'theme' == {query}* ]]; then
	addResult 'AEDTheme' "$(getDataDir)/themes" 'Open Theme Directory' 'In Alfred' 'icon.png' 'yes' '';
fi
if [[ 'plugins' == {query}* ]]; then
	addResult 'AEDPlugin' "$(getDataDir)/plugins" 'Open Plugin Directory' 'In Alfred' 'icon.png' 'yes' '';
fi
if [[ 'workflow' == {query}* ]]; then
	addResult 'AEDWorkflow' "$(pwd)" 'Open Workflow Directory' 'In Alfred' 'icon.png' 'yes' '';
fi

echo "$(getXMLResults)";</string>
				<key>subtext</key>
				<string>Alfred Editor</string>
				<key>title</key>
				<string>Open Important Files for Alfred Editor</string>
				<key>type</key>
				<integer>5</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>5D9B1396-CFBE-435B-B71B-66001A9E7B35</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>type</key>
			<string>alfred.workflow.action.revealfile</string>
			<key>uid</key>
			<string>9FC31761-B240-4FB1-B894-9E3916D9F955</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

#
# If the directories are not in place, create them and set defaults.
#
if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   mkdir "$(getDataDir)/themes";
   mkdir "$(getDataDir)/plugins";
   echo -n "lesser-dark" &gt; "$(getDataDir)/current.theme";
fi

echo -n "{query}" &gt;  "$(getDataDir)/current.theme";

echo "New Theme: {query}";
</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>576F338D-10F7-4E33-9F6C-247DC381A6EB</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>ae:theme</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading Themes....</string>
				<key>script</key>
				<string>VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

RESULTS=()

################################################################################
# Adds a result to the result array
#
# $1 uid
# $2 arg
# $3 title
# $4 subtitle
# $5 icon
# $6 valid
# $7 autocomplete
###############################################################################
addResult() {
  RESULT="&lt;item uid='$(xmlEncode "$1")' arg='$(xmlEncode "$2")' valid='$6' autocomplete='$7'&gt;&lt;title&gt;$(xmlEncode "$3")&lt;/title&gt;&lt;subtitle&gt;$(xmlEncode "$4")&lt;/subtitle&gt;&lt;icon&gt;$(xmlEncode "$5")&lt;/icon&gt;&lt;/item&gt;"
  RESULTS+=("$RESULT")
}

###############################################################################
# Prints the feedback xml to stdout
###############################################################################
getXMLResults() {
  echo "&lt;?xml version='1.0'?&gt;&lt;items&gt;"

#  if [ "${#string[@]}" = "0" ]; then
#    echo "&lt;item uid='oftask' arg='-' valid='no'&gt;&lt;title&gt;No results found&lt;/title&gt;&lt;subtitle&gt;Please try another search term&lt;/subtitle&gt;&lt;icon&gt;&lt;/icon&gt;&lt;/item&gt;"
#  fi

  for R in ${RESULTS[*]}; do
    echo "$R"
  done

  echo "&lt;/items&gt;"
}

###############################################################################
# Escapes XML special characters with their entities
###############################################################################
xmlEncode() {
  echo "$1" | sed 's/\n/ /' | sed 's/&amp;/&amp;amp;/' | sed 's/&gt;/&amp;gt;/' | sed 's/&lt;/&amp;lt;/' | sed "s/\'/&amp;apos;/" | sed 's/\"/&amp;quot;/'
}

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}


for thm in `ls "$(getDataDir)/themes/"`; do
	thmname=${thm%.*};
	if [[ $thmname == {query}* ]]; then
		addResult 'AEDData' "$thmname" "Theme: $thmname" 'Set Theme' 'icon.png' 'yes' "$thmname";
	fi
done

echo "$(getXMLResults)";</string>
				<key>subtext</key>
				<string>Alfred Editor</string>
				<key>title</key>
				<string>Set or Edit a Theme for Alfred Editor</string>
				<key>type</key>
				<integer>5</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>CE85A2C0-77D2-419A-B4F2-12D8B6BE71E5</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

#
# If the directories are not in place, create them and set defaults.
#
if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   mkdir "$(getDataDir)/themes";
   mkdir "$(getDataDir)/plugins";
   echo -n "lesser-dark" &gt; "$(getDataDir)/current.theme";
fi

theme="$(getDataDir)/themes/{query}.json";

/usr/bin/osascript -e "tell application \"Alfred 2\" to run trigger \"EditAlfredEditor\" in workflow \"com.customct.AlfredEditor\" with argument \"$theme\"";
</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>281B3D0C-272F-45AB-924E-7BF9C0AC11FC</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<true/>
				<key>output</key>
				<integer>0</integer>
				<key>removeextension</key>
				<false/>
				<key>sticky</key>
				<false/>
				<key>text</key>
				<string>Alfred Editor</string>
				<key>title</key>
				<string>{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>35FCA1C0-528B-4BBB-96B0-037AC5E68121</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>ae:showtheme</string>
				<key>subtext</key>
				<string>Alfred Editor</string>
				<key>text</key>
				<string>Show Current Theme</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>459D6859-0B7F-4B55-B20C-FEB262ADC8EF</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

#
# If the directories are not in place, create them and set defaults.
#
if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   mkdir "$(getDataDir)/themes";
   mkdir "$(getDataDir)/plugins";
   echo -n "lesser-dark" &gt; "$(getDataDir)/current.theme";
fi

theme=`cat "$(getDataDir)/current.theme"`;

echo "Theme: $theme";
</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>CBE8A345-1166-4A95-9694-B79AD101AA0C</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>ae:createtheme</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading...</string>
				<key>script</key>
				<string>include_once("workflows.php");
				
//
// Create the workflow object to use.
//
$wf = new Workflows();

$input = trim("{query}");

if(file_exists($wf-&gt;data() . "/themes/" . $input . ".json")) {
	$wf-&gt;result("AENT", "", "Theme: $input - Already exist", "Alfred Editor", "icon.png", "no", "");
} else {
	$wf-&gt;result("AENT", "$input", "Theme: $input", "Alfred Editor", "icon.png", "yes", "$input");
}

echo $wf-&gt;toxml();</string>
				<key>subtext</key>
				<string>Alfred Editor</string>
				<key>title</key>
				<string>Create a New Theme</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>CDB8963D-6A56-4AED-8087-6C3D6C6EBDA6</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

#
# If the directories are not in place, create them and set defaults.
#
if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   mkdir "$(getDataDir)/themes";
   mkdir "$(getDataDir)/plugins";
   echo -n "lesser-dark" &gt; "$(getDataDir)/current.theme";
fi

cp themes/lesser-dark.json "$(getDataDir)/themes/{query}.json";

/usr/bin/osascript -e "tell application \"Alfred 2\" to run trigger \"EditAlfredEditor\" in workflow \"com.customct.AlfredEditor\" with argument \"$(getDataDir)/themes/{query}.json\"";

echo "Created Theme: $theme";
</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>180202E9-0ABB-4B09-A2F6-8B5C6A28212B</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>tell application "Alfred 2" to run trigger "HammerspoonCommand" in workflow "com.customct.Hammerspoon" with argument "hs.appfinder.windowFromWindowTitle(\"{query}\"):focus()"</string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>20DE9F9D-0B97-4DFE-A5D0-95F0E6C6AB90</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>ae:windowlist</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading Windows...</string>
				<key>script</key>
				<string>VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

RESULTS=()

################################################################################
# Adds a result to the result array
#
# $1 uid
# $2 arg
# $3 title
# $4 subtitle
# $5 icon
# $6 valid
# $7 autocomplete
###############################################################################
addResult() {
  RESULT="&lt;item uid='$(xmlEncode "$1")' arg='$(xmlEncode "$2")' valid='$6' autocomplete='$7'&gt;&lt;title&gt;$(xmlEncode "$3")&lt;/title&gt;&lt;subtitle&gt;$(xmlEncode "$4")&lt;/subtitle&gt;&lt;icon&gt;$(xmlEncode "$5")&lt;/icon&gt;&lt;/item&gt;"
  RESULTS+=("$RESULT")
}

###############################################################################
# Prints the feedback xml to stdout
###############################################################################
getXMLResults() {
  echo "&lt;?xml version='1.0'?&gt;&lt;items&gt;"

#  if [ "${#string[@]}" = "0" ]; then
#    echo "&lt;item uid='oftask' arg='-' valid='no'&gt;&lt;title&gt;No results found&lt;/title&gt;&lt;subtitle&gt;Please try another search term&lt;/subtitle&gt;&lt;icon&gt;&lt;/icon&gt;&lt;/item&gt;"
#  fi

  for R in ${RESULTS[*]}; do
    echo "$R"
  done

  echo "&lt;/items&gt;"
}

###############################################################################
# Escapes XML special characters with their entities
###############################################################################
xmlEncode() {
  echo "$1" | sed 's/\n/ /' | sed 's/&amp;/&amp;amp;/' | sed 's/&gt;/&amp;gt;/' | sed 's/&lt;/&amp;lt;/' | sed "s/\'/&amp;apos;/" | sed 's/\"/&amp;quot;/'
}

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

count=0;
for thm in `cat "$(getDataDir)/windows.txt"`; do
	if [[ $thm == {query}* ]]; then
		addResult 'AEDData' "$thm" "$thm" 'Alfred Editor Window' 'icon.png' 'yes' "$thm";
		count=`expr $count + 1`;
	fi
done

if [[ $count &lt; 1 ]]; then
		addResult 'AEDData' "" "None" 'Alfred Editor Window' 'icon.png' 'no' "";
fi


echo "$(getXMLResults)";</string>
				<key>subtext</key>
				<string>Alfred Editor</string>
				<key>title</key>
				<string>Bring Alfred Editor Window to Front</string>
				<key>type</key>
				<integer>5</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>5783BF34-0318-4674-BBAB-DC5E8CE90398</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>ae:keyboard</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading Mappings....</string>
				<key>script</key>
				<string>VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

RESULTS=()

################################################################################
# Adds a result to the result array
#
# $1 uid
# $2 arg
# $3 title
# $4 subtitle
# $5 icon
# $6 valid
# $7 autocomplete
###############################################################################
addResult() {
  RESULT="&lt;item uid='$(xmlEncode "$1")' arg='$(xmlEncode "$2")' valid='$6' autocomplete='$7'&gt;&lt;title&gt;$(xmlEncode "$3")&lt;/title&gt;&lt;subtitle&gt;$(xmlEncode "$4")&lt;/subtitle&gt;&lt;icon&gt;$(xmlEncode "$5")&lt;/icon&gt;&lt;/item&gt;"
  RESULTS+=("$RESULT")
}

###############################################################################
# Prints the feedback xml to stdout
###############################################################################
getXMLResults() {
  echo "&lt;?xml version='1.0'?&gt;&lt;items&gt;"

#  if [ "${#string[@]}" = "0" ]; then
#    echo "&lt;item uid='oftask' arg='-' valid='no'&gt;&lt;title&gt;No results found&lt;/title&gt;&lt;subtitle&gt;Please try another search term&lt;/subtitle&gt;&lt;icon&gt;&lt;/icon&gt;&lt;/item&gt;"
#  fi

  for R in ${RESULTS[*]}; do
    echo "$R"
  done

  echo "&lt;/items&gt;"
}

###############################################################################
# Escapes XML special characters with their entities
###############################################################################
xmlEncode() {
  echo "$1" | sed 's/\n/ /' | sed 's/&amp;/&amp;amp;/' | sed 's/&gt;/&amp;gt;/' | sed 's/&lt;/&amp;lt;/' | sed "s/\'/&amp;apos;/" | sed 's/\"/&amp;quot;/'
}

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}
if [[ 'sublime' == {query}* ]]; then
	addResult 'AEKEYSUB' "sublime" 'Sublime Keyboard Mapping' 'Alfed Editor' 'icon.png' 'yes' 'sublime';
fi

if [[ 'emacs' == {query}* ]]; then
	addResult 'AEKEYSUB' "emacs" 'Emacs Keyboard Mapping' 'Alfed Editor' 'icon.png' 'yes' 'emacs';
fi

if [[ 'vim' == {query}* ]]; then
	addResult 'AEKEYVIM' "vim" 'Vim Keyboard Mapping' 'Alfred Editor' 'icon.png' 'yes' 'vim';
fi

echo "$(getXMLResults)";</string>
				<key>subtext</key>
				<string>Alfred Editor</string>
				<key>title</key>
				<string>Select Keyboard Mapping</string>
				<key>type</key>
				<integer>5</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>EB499A45-3D0D-48F6-BF17-090015F4897F</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

#
# If the directories are not in place, create them and set defaults.
#
if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   mkdir "$(getDataDir)/themes";
   mkdir "$(getDataDir)/plugins";
   echo -n "lesser-dark" &gt; "$(getDataDir)/current.theme";
   echo -n "" &gt; "$(getDataDir)/windows.txt";
   echo -n "vim" &gt; "$(getDataDir)/keyboard.txt";
fi

#
# Copy all themes and plugins into place.
#

echo -n "{query}" &gt; "$(getDataDir)/keyboard.txt";

echo "Keyboard: {query} is set.";
</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>CD390769-84F3-4A30-A948-6F7AE0240432</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>This workflow is created by Richard Guay. Visit http://customct.com/alfred-2-workflows for even more fun!</string>
	<key>uidata</key>
	<dict>
		<key>180202E9-0ABB-4B09-A2F6-8B5C6A28212B</key>
		<dict>
			<key>ypos</key>
			<real>1220</real>
		</dict>
		<key>20DE9F9D-0B97-4DFE-A5D0-95F0E6C6AB90</key>
		<dict>
			<key>ypos</key>
			<real>1330</real>
		</dict>
		<key>23CF4A89-F938-4887-85DD-4CEA586F7C0D</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>281B3D0C-272F-45AB-924E-7BF9C0AC11FC</key>
		<dict>
			<key>ypos</key>
			<real>990</real>
		</dict>
		<key>35FCA1C0-528B-4BBB-96B0-037AC5E68121</key>
		<dict>
			<key>ypos</key>
			<real>990</real>
		</dict>
		<key>459D6859-0B7F-4B55-B20C-FEB262ADC8EF</key>
		<dict>
			<key>ypos</key>
			<real>1100</real>
		</dict>
		<key>50B62579-7339-42A0-89F6-498E6F52B61E</key>
		<dict>
			<key>ypos</key>
			<real>260</real>
		</dict>
		<key>52DD1812-90ED-4B93-9416-7F7A48E5D575</key>
		<dict>
			<key>ypos</key>
			<real>510</real>
		</dict>
		<key>5548C7CD-634F-42A5-96C6-A9DBF8179E87</key>
		<dict>
			<key>ypos</key>
			<real>630</real>
		</dict>
		<key>576F338D-10F7-4E33-9F6C-247DC381A6EB</key>
		<dict>
			<key>ypos</key>
			<real>870</real>
		</dict>
		<key>5783BF34-0318-4674-BBAB-DC5E8CE90398</key>
		<dict>
			<key>ypos</key>
			<real>1330</real>
		</dict>
		<key>5D9B1396-CFBE-435B-B71B-66001A9E7B35</key>
		<dict>
			<key>ypos</key>
			<real>630</real>
		</dict>
		<key>6CA6FC00-D1E3-4A64-8DFB-56D53950DD3B</key>
		<dict>
			<key>ypos</key>
			<real>380</real>
		</dict>
		<key>6CFB3322-F7BA-4017-9EF7-28F8C92C110E</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>79B9FC52-024B-44B2-9A7C-6B27674E50F2</key>
		<dict>
			<key>ypos</key>
			<real>510</real>
		</dict>
		<key>83163FAE-D31D-4D49-BDFD-016C3C9CFB63</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>83E00A4A-94F3-488D-9F20-977BF230A72D</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>856DEE49-73CE-4727-80B6-4C2AF3F13179</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>87C367FE-29C3-4B94-BA81-50F59A4F1B00</key>
		<dict>
			<key>ypos</key>
			<real>260</real>
		</dict>
		<key>9FC31761-B240-4FB1-B894-9E3916D9F955</key>
		<dict>
			<key>ypos</key>
			<real>750</real>
		</dict>
		<key>CBE8A345-1166-4A95-9694-B79AD101AA0C</key>
		<dict>
			<key>ypos</key>
			<real>1100</real>
		</dict>
		<key>CD390769-84F3-4A30-A948-6F7AE0240432</key>
		<dict>
			<key>ypos</key>
			<real>1440</real>
		</dict>
		<key>CDB8963D-6A56-4AED-8087-6C3D6C6EBDA6</key>
		<dict>
			<key>ypos</key>
			<real>1220</real>
		</dict>
		<key>CE85A2C0-77D2-419A-B4F2-12D8B6BE71E5</key>
		<dict>
			<key>ypos</key>
			<real>870</real>
		</dict>
		<key>EB499A45-3D0D-48F6-BF17-090015F4897F</key>
		<dict>
			<key>ypos</key>
			<real>1440</real>
		</dict>
		<key>FBD0D7B7-C227-4A87-8E32-6648D871CCA7</key>
		<dict>
			<key>ypos</key>
			<real>510</real>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>http://customct.com/alfred-2-workflows</string>
</dict>
</plist>
